diff --git a/Makefile.in b/Makefile.in
index 0b4df73a..6eea41f4 100644
--- a/Makefile.in
+++ b/Makefile.in
@@ -430,7 +430,7 @@ BASHINCFILES =	 $(BASHINCDIR)/posixstat.h $(BASHINCDIR)/ansi_stdlib.h \
 
 LIBRARIES = $(GLOB_LIB) $(SHLIB_LIB) $(READLINE_LIB) $(HISTORY_LIB) \
 	    $(TERMCAP_LIB) $(TILDE_LIB) $(MALLOC_LIB) $(INTL_LIB) $(LIBICONV) \
-	    $(LOCAL_LIBS)
+	    $(LOCAL_LIBS) -lvarlink
 
 LIBDEP = $(GLOB_DEP) $(SHLIB_DEP) $(INTL_DEP) $(READLINE_DEP) $(HISTORY_DEP) \
 	 $(TERMCAP_DEP) $(TILDE_DEP) $(MALLOC_DEP)
@@ -450,11 +450,11 @@ CSOURCES = shell.c eval.c parse.y general.c make_cmd.c print_cmd.c y.tab.c \
 	   input.c bashhist.c array.c arrayfunc.c assoc.c sig.c pathexp.c \
 	   unwind_prot.c siglist.c bashline.c bracecomp.c error.c \
 	   list.c stringlib.c locale.c findcmd.c redir.c \
-	   pcomplete.c pcomplib.c syntax.c xmalloc.c
+	   pcomplete.c pcomplib.c syntax.c xmalloc.c spt_status.c
 
 HSOURCES = shell.h flags.h trap.h hashcmd.h hashlib.h jobs.h builtins.h \
 	   general.h variables.h config.h $(ALLOC_HEADERS) alias.h \
-	   quit.h unwind_prot.h syntax.h ${GRAM_H} \
+	   quit.h unwind_prot.h syntax.h ${GRAM_H} spt_status.h \
 	   command.h input.h error.h bashansi.h dispose_cmd.h make_cmd.h \
 	   subst.h externs.h siglist.h bashhist.h bashline.h bashtypes.h \
 	   array.h arrayfunc.h sig.h mailcheck.h bashintl.h bashjmp.h \
@@ -494,7 +494,7 @@ OBJECTS	 = shell.o eval.o y.tab.o general.o make_cmd.o print_cmd.o $(GLOBO) \
 	   trap.o input.o unwind_prot.o pathexp.o sig.o test.o version.o \
 	   alias.o $(ARRAY_O) arrayfunc.o assoc.o braces.o bracecomp.o bashhist.o \
 	   bashline.o $(SIGLIST_O) list.o stringlib.o locale.o findcmd.o redir.o \
-	   pcomplete.o pcomplib.o syntax.o xmalloc.o $(SIGNAMES_O)
+	   pcomplete.o pcomplib.o syntax.o xmalloc.o spt_status.o $(SIGNAMES_O)
 
 # Where the source code of the shell builtins resides.
 BUILTIN_SRCDIR=$(srcdir)/builtins
diff --git a/shell.c b/shell.c
index ebd89651..1d6a65e5 100644
--- a/shell.c
+++ b/shell.c
@@ -93,6 +93,13 @@ extern int get_tty_state PARAMS((void));
 #  include <opennt/opennt.h>
 #endif
 
+#include <varlink.h>
+#include <assert.h>
+#include <sys/epoll.h>
+#include <pty.h>
+#include <utmp.h>
+#include "spt_status.h"
+
 #if !defined (HAVE_GETPW_DECLS)
 extern struct passwd *getpwuid ();
 #endif /* !HAVE_GETPW_DECLS */
@@ -343,6 +350,204 @@ static void shell_reinitialize PARAMS((void));
 
 static void show_shell_usage PARAMS((FILE *, int));
 
+
+typedef struct {
+        VarlinkService *service;
+        int epoll_fd;
+} varlink_ctx;
+
+static int wait_for_pid_gone(pid_t pid)
+{
+    const int max_iters = 100000; /* 1 second timeout */
+    char path[256];
+    snprintf(path, sizeof(path), "/proc/%u/stat", pid);
+
+    for (int i = 0; i < max_iters; i++) {
+        int fd = open(path, O_RDONLY);
+        if (fd < 0) {
+            if (errno == ENOENT)
+                return 0;
+            return -1;
+        }
+        close(fd);
+        usleep(10);
+    }
+
+    errno = ETIMEDOUT;
+    return -1;
+}
+
+static long org_bash_zygote_Spawn(VarlinkService *service,
+                                     VarlinkCall *call,
+                                     VarlinkObject *parameters,
+                                     uint64_t flags,
+                                     void *userdata) {
+    VarlinkObject *out;
+    const char *tty_name;
+    const char *current_dir;
+    int64_t calling_pid;
+    varlink_ctx *ctx = userdata;
+
+    if (varlink_object_get_int(parameters, "pid", &calling_pid) < 0) {
+        fprintf(stderr, "bad missing parameter: pid\n");
+        return -1;
+    }
+    if (varlink_object_get_string(parameters, "tty_name", &tty_name) < 0) {
+        fprintf(stderr, "bad missing parameter: tty_name\n");
+        return -1;
+    }
+    if (varlink_object_get_string(parameters, "current_dir", &current_dir) < 0) {
+        fprintf(stderr, "bad missing parameter: current_dir\n");
+        return -1;
+    }
+
+    int tty_fd = open(tty_name, O_RDWR | O_NOCTTY);
+    if (tty_fd < 0) {
+        fprintf(stderr, "open: %s: %m\n", tty_name);
+        return -1;
+    }
+
+    pid_t child_pid = fork();
+    assert(child_pid >= 0);
+    if (child_pid == 0) {
+        close(ctx->epoll_fd);
+        close(varlink_call_get_connection_fd(call));
+        varlink_service_free(service);
+
+        /* set process name to "bash" to avoid compatibility issues
+           with various tools and scripts */
+        init_ps_display("bash");
+
+        /* make sure calling process releases its tty ownership -
+           otherwise login_tty() will fail with EPERM */
+        if (wait_for_pid_gone(calling_pid) < 0) {
+            fprintf(stderr, "wait_for_pid_gone: %m\n");
+            exit_shell(1);
+        }
+
+        if (login_tty(tty_fd) < 0) {
+            fprintf(stderr, "login_tty: %m\n");
+            exit_shell(1);
+        }
+
+        dollar_dollar_pid = getpid();
+
+        if (chdir(current_dir) < 0)
+            fprintf(stderr, "failed to change dir: %m\n");
+        set_working_directory((char *)current_dir);
+        set_pwd();
+
+        indirection_level = 0;
+        parse_and_execute_level = 0;
+
+        /* Initialize the trap signal handlers before installing our own
+           signal handlers.  traps.c:restore_original_signals () is responsible
+           for restoring the original default signal handlers.  That function
+           is called when we make a new child. */
+        initialize_traps ();
+        initialize_signals (0);
+
+        /* Initialize the data structures for storing and running jobs. */
+        initialize_job_control (jobs_m_flag);
+
+        bash_initialize_history ();
+        load_history ();
+
+        reader_loop ();
+        exit_shell (last_command_exit_value);
+    }
+
+    close(tty_fd);
+
+    assert(varlink_object_new(&out) == 0);
+    assert(varlink_object_set_int(out, "pid", child_pid) == 0);
+    int res = varlink_call_reply(call, out, 0);
+    if (res < 0) {
+        fprintf(stderr, "varlink_call_reply: %s\n", varlink_error_string(res));
+        varlink_object_unref(out);
+        return -1;
+    }
+
+    varlink_object_unref(out);
+    return 0;
+}
+
+static int process_varlink_events(varlink_ctx *ctx) {
+    struct epoll_event events[2];
+    long n;
+
+    n = epoll_wait(ctx->epoll_fd, events, 2, -1);
+    if (n == 0)
+        return 0;
+    if (n < 0) {
+        if (errno == EINTR)
+            return 0;
+        fprintf(stderr, "epoll_wait: %m\n");
+        return -1;
+    }
+
+    for (long i = 0; i < n; i += 1) {
+        if (events[i].data.ptr == ctx->service) {
+            int res = varlink_service_process_events(ctx->service);
+            if (res < 0)
+                fprintf(stderr, "varlink_service_process_events: %s (%m)\n", varlink_error_string(res));
+        } else
+            assert(false);
+    }
+
+    return 0;
+}
+
+static void varlink_loop(void)
+{
+    varlink_ctx ctx = {};
+
+    setlinebuf(stdout);
+    setlinebuf(stderr);
+
+    uid_t uid = getuid();
+    char socket_addr[4096];
+    snprintf(socket_addr, sizeof(socket_addr), "unix:@bash-zygote-%u.socket", uid);
+
+    const char *interface = "interface org.bash.zygote\n"
+                            "method Spawn(pid: int, tty_name: string, current_dir: string) -> (pid: int)";
+
+    int fd = -1;
+    if (getenv("LISTEN_FDS") != NULL)
+        fd = 3;
+
+    int res = varlink_service_new(&ctx.service,
+                                  "mbachry", "bash-zygote", "0.1", "https://github.com/mbachry/bash-zygote",
+                                  socket_addr,
+                                  fd);
+    if (res < 0) {
+        fprintf(stderr, "varlink_service_new: %s (%m)\n", varlink_error_string(res));
+        exit_shell(1);
+    }
+    assert(varlink_service_add_interface(ctx.service, interface,
+                                         "Spawn", org_bash_zygote_Spawn, &ctx,
+                                         NULL) == 0);
+
+    ctx.epoll_fd = epoll_create1(EPOLL_CLOEXEC);
+    assert(ctx.epoll_fd > 0);
+
+    struct epoll_event event = {
+        .events = EPOLLIN,
+        .data = {
+            .ptr = ctx.service
+        }
+    };
+    assert(epoll_ctl(ctx.epoll_fd,
+                     EPOLL_CTL_ADD,
+                     varlink_service_get_fd(ctx.service),
+                     &event) == 0);
+
+    while (1) {
+        if (process_varlink_events(&ctx) < 0)
+            exit_shell(1);
+    }
+}
+
 #ifdef __CYGWIN__
 static void
 _cygwin32_check_tmp ()
@@ -829,8 +1034,9 @@ main (argc, argv, env)
   if (pretty_print_mode)
     exit_shell (pretty_print_loop ());
 
-  /* Read commands until exit condition. */
-  reader_loop ();
+  save_ps_display_args(argc, argv);
+  varlink_loop();
+
   exit_shell (last_command_exit_value);
 }
 
@@ -1941,13 +2147,6 @@ shell_initialize ()
      find_shell_builtin () works correctly. */
   initialize_shell_builtins ();
 
-  /* Initialize the trap signal handlers before installing our own
-     signal handlers.  traps.c:restore_original_signals () is responsible
-     for restoring the original default signal handlers.  That function
-     is called when we make a new child. */
-  initialize_traps ();
-  initialize_signals (0);
-
   /* It's highly unlikely that this will change. */
   if (current_host_name == 0)
     {
@@ -1980,9 +2179,6 @@ shell_initialize ()
   initialize_shell_variables (shell_environment, privileged_mode||running_setuid);
 #endif
 
-  /* Initialize the data structures for storing and running jobs. */
-  initialize_job_control (jobs_m_flag);
-
   /* Initialize input streams to null. */
   initialize_bash_input ();
 
diff --git a/spt_status.c b/spt_status.c
new file mode 100644
index 00000000..6be8fc3a
--- /dev/null
+++ b/spt_status.c
@@ -0,0 +1,246 @@
+/*--------------------------------------------------------------------
+ * spt_status.c
+ *
+ * Routines to support changing the ps display of a process.
+ * Mechanism differs wildly across platforms.
+ *
+ * Copyright (c) 2000-2009, PostgreSQL Global Development Group
+ * Copyright (c) 2009-2021 Daniele Varrazzo <daniele.varrazzo@gmail.com>
+ * various details abducted from various places
+ *
+ * This file was taken from PostgreSQL. The PostgreSQL copyright terms follow.
+ *--------------------------------------------------------------------
+ */
+
+/*
+ * PostgreSQL Database Management System
+ * (formerly known as Postgres, then as Postgres95)
+ *
+ * Portions Copyright (c) 1996-2009, PostgreSQL Global Development Group
+ *
+ * Portions Copyright (c) 1994, The Regents of the University of California
+ *
+ * Permission to use, copy, modify, and distribute this software and its
+ * documentation for any purpose, without fee, and without a written agreement
+ * is hereby granted, provided that the above copyright notice and this
+ * paragraph and the following two paragraphs appear in all copies.
+ *
+ * IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR
+ * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING
+ * LOST PROFITS, ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS
+ * DOCUMENTATION, EVEN IF THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ * THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
+ * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
+ * AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
+ * ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATIONS TO
+ * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
+ */
+
+#include <unistd.h>
+#include <sys/prctl.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include "spt_status.h"
+
+extern char **environ;
+
+bool        update_process_title = true;
+
+#define PS_PADDING '\0'
+
+
+static char *ps_buffer;         /* will point to argv area */
+static size_t ps_buffer_size;   /* space determined at run time */
+static size_t last_status_len;  /* use to minimize length of clobber */
+
+static size_t ps_buffer_fixed_size;     /* size of the constant prefix */
+
+/* save the original argv[] location here */
+static int  save_argc;
+static char **save_argv;
+
+
+/*
+ * Call this early in startup to save the original argc/argv values.
+ * If needed, we make a copy of the original argv[] array to preserve it
+ * from being clobbered by subsequent ps_display actions.
+ *
+ * (The original argv[] will not be overwritten by this routine, but may be
+ * overwritten during init_ps_display.  Also, the physical location of the
+ * environment strings may be moved, so this should be called before any code
+ * that might try to hang onto a getenv() result.)
+ */
+char      **
+save_ps_display_args(int argc, char **argv)
+{
+    save_argc = argc;
+    save_argv = argv;
+
+    /*
+     * If we're going to overwrite the argv area, count the available space.
+     * Also move the environment to make additional room.
+     */
+    {
+        char       *end_of_area = NULL;
+        char      **new_environ;
+        int         i;
+
+        /*
+         * check for contiguous argv strings
+         */
+        for (i = 0; i < argc; i++)
+        {
+            if (i == 0 || end_of_area + 1 == argv[i])
+                end_of_area = argv[i] + strlen(argv[i]);
+        }
+
+        if (end_of_area == NULL)    /* probably can't happen? */
+        {
+            ps_buffer = NULL;
+            ps_buffer_size = 0;
+            return argv;
+        }
+
+        {
+            /*
+             * Clobbering environ works fine from within the process, but some
+             * external utils use /proc/PID/environ and they would find noting,
+             * or mess, if we clobber it. A user can define SPT_NOENV to limit
+             * clobbering to argv (see ticket #16).
+             */
+            char *noenv;
+
+            noenv = getenv("SPT_NOENV");
+            if (!noenv || !*noenv) {
+
+                /*
+                 * check for contiguous environ strings following argv
+                 */
+                for (i = 0; environ[i] != NULL; i++)
+                {
+                    if (end_of_area + 1 == environ[i])
+                        end_of_area = environ[i] + strlen(environ[i]);
+                }
+
+                /*
+                 * move the environment out of the way
+                 */
+                new_environ = (char **) malloc((i + 1) * sizeof(char *));
+                for (i = 0; environ[i] != NULL; i++)
+                    new_environ[i] = strdup(environ[i]);
+                new_environ[i] = NULL;
+                environ = new_environ;
+            }
+        }
+
+        ps_buffer = argv[0];
+        last_status_len = ps_buffer_size = end_of_area - argv[0];
+
+    }
+
+    /*
+     * If we're going to change the original argv[] then make a copy for
+     * argument parsing purposes.
+     *
+     * (NB: do NOT think to remove the copying of argv[], even though
+     * postmaster.c finishes looking at argv[] long before we ever consider
+     * changing the ps display.  On some platforms, getopt() keeps pointers
+     * into the argv array, and will get horribly confused when it is
+     * re-called to analyze a subprocess' argument string if the argv storage
+     * has been clobbered meanwhile.  Other platforms have other dependencies
+     * on argv[].
+     */
+    {
+        char      **new_argv;
+        int         i;
+
+        new_argv = (char **) malloc((argc + 1) * sizeof(char *));
+        for (i = 0; i < argc; i++)
+            new_argv[i] = strdup(argv[i]);
+        new_argv[argc] = NULL;
+
+        argv = new_argv;
+    }
+
+    return argv;
+}
+
+/*
+ * Call this once during subprocess startup to set the identification
+ * values.  At this point, the original argv[] array may be overwritten.
+ */
+void
+init_ps_display(const char *initial_str)
+{
+    /* no ps display if you didn't call save_ps_display_args() */
+    if (!save_argv)
+        return;
+    /* If ps_buffer is a pointer, it might still be null */
+    if (!ps_buffer)
+        return;
+
+    /*
+     * Overwrite argv[] to point at appropriate space, if needed
+     */
+
+    save_argv[0] = ps_buffer;
+    save_argv[1] = NULL;
+
+    {
+        int         i;
+
+        /* make extra argv slots point at end_of_area (a NUL) */
+        for (i = 1; i < save_argc; i++)
+            save_argv[i] = ps_buffer + ps_buffer_size;
+    }
+
+    /*
+     * Make fixed prefix of ps display.
+     */
+
+    ps_buffer[0] = '\0';
+
+    ps_buffer_fixed_size = strlen(ps_buffer);
+
+    set_ps_display(initial_str, true);
+}
+
+
+
+/*
+ * Call this to update the ps status display to a fixed prefix plus an
+ * indication of what you're currently doing passed in the argument.
+ */
+void
+set_ps_display(const char *activity, bool force)
+{
+
+    if (!force && !update_process_title)
+        return;
+
+    /* If ps_buffer is a pointer, it might still be null */
+    if (!ps_buffer)
+        return;
+
+    /* Update ps_buffer to contain both fixed part and activity */
+    strlcpy(ps_buffer + ps_buffer_fixed_size, activity,
+            ps_buffer_size - ps_buffer_fixed_size);
+
+    /* Transmit new setting to kernel, if necessary */
+
+    {
+        size_t      buflen;
+
+        /* pad unused memory */
+        buflen = strlen(ps_buffer);
+        /* clobber remainder of old status string */
+        if (last_status_len > buflen)
+            memset(ps_buffer + buflen, PS_PADDING, last_status_len - buflen);
+        last_status_len = buflen;
+    }
+
+    prctl(PR_SET_NAME, ps_buffer);
+}
diff --git a/spt_status.h b/spt_status.h
new file mode 100644
index 00000000..af46f37f
--- /dev/null
+++ b/spt_status.h
@@ -0,0 +1,19 @@
+/*-------------------------------------------------------------------------
+ *
+ * spt_status.h
+ *
+ * Declarations for spt_status.c
+ *
+ *-------------------------------------------------------------------------
+ */
+
+#ifndef SPT_STATUS_H
+#define SPT_STATUS_H
+
+#include <stdbool.h>
+
+extern char **save_ps_display_args(int argc, char **argv);
+extern void init_ps_display(const char *initial_str);
+extern void set_ps_display(const char *activity, bool force);
+
+#endif   /* SPT_STATUS_H */
