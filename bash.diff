diff --git a/Makefile.in b/Makefile.in
index 0b4df73a..ed2c52a2 100644
--- a/Makefile.in
+++ b/Makefile.in
@@ -430,7 +430,7 @@ BASHINCFILES =	 $(BASHINCDIR)/posixstat.h $(BASHINCDIR)/ansi_stdlib.h \
 
 LIBRARIES = $(GLOB_LIB) $(SHLIB_LIB) $(READLINE_LIB) $(HISTORY_LIB) \
 	    $(TERMCAP_LIB) $(TILDE_LIB) $(MALLOC_LIB) $(INTL_LIB) $(LIBICONV) \
-	    $(LOCAL_LIBS)
+	    $(LOCAL_LIBS) -lvarlink
 
 LIBDEP = $(GLOB_DEP) $(SHLIB_DEP) $(INTL_DEP) $(READLINE_DEP) $(HISTORY_DEP) \
 	 $(TERMCAP_DEP) $(TILDE_DEP) $(MALLOC_DEP)
diff --git a/shell.c b/shell.c
index ebd89651..c3ea87b4 100644
--- a/shell.c
+++ b/shell.c
@@ -93,6 +93,12 @@ extern int get_tty_state PARAMS((void));
 #  include <opennt/opennt.h>
 #endif
 
+#include <varlink.h>
+#include <assert.h>
+#include <sys/epoll.h>
+#include <pty.h>
+#include <utmp.h>
+
 #if !defined (HAVE_GETPW_DECLS)
 extern struct passwd *getpwuid ();
 #endif /* !HAVE_GETPW_DECLS */
@@ -343,6 +349,202 @@ static void shell_reinitialize PARAMS((void));
 
 static void show_shell_usage PARAMS((FILE *, int));
 
+
+typedef struct {
+        VarlinkService *service;
+        int epoll_fd;
+} varlink_ctx;
+
+static int wait_for_pid_gone(pid_t pid)
+{
+    const int max_iters = 100000; /* 1 second timeout */
+    char path[256];
+    snprintf(path, sizeof(path), "/proc/%u/stat", pid);
+
+    for (int i = 0; i < max_iters; i++) {
+        int fd = open(path, O_RDONLY);
+        if (fd < 0) {
+            if (errno == ENOENT)
+                return 0;
+            return -1;
+        }
+        close(fd);
+        usleep(10);
+    }
+
+    errno = ETIMEDOUT;
+    return -1;
+}
+
+static long org_bash_zygote_Spawn(VarlinkService *service,
+                                     VarlinkCall *call,
+                                     VarlinkObject *parameters,
+                                     uint64_t flags,
+                                     void *userdata) {
+    VarlinkObject *out;
+    const char *tty_name;
+    const char *current_dir;
+    int64_t calling_pid;
+    varlink_ctx *ctx = userdata;
+
+    if (varlink_object_get_int(parameters, "pid", &calling_pid) < 0) {
+        fprintf(stderr, "bad missing parameter: pid\n");
+        return -1;
+    }
+    if (varlink_object_get_string(parameters, "tty_name", &tty_name) < 0) {
+        fprintf(stderr, "bad missing parameter: tty_name\n");
+        return -1;
+    }
+    if (varlink_object_get_string(parameters, "current_dir", &current_dir) < 0) {
+        fprintf(stderr, "bad missing parameter: current_dir\n");
+        return -1;
+    }
+
+    int tty_fd = open(tty_name, O_RDWR | O_NOCTTY);
+    if (tty_fd < 0) {
+        fprintf(stderr, "open: %s: %m\n", tty_name);
+        return -1;
+    }
+
+    pid_t child_pid = fork();
+    assert(child_pid >= 0);
+    if (child_pid == 0) {
+        close(ctx->epoll_fd);
+        close(varlink_call_get_connection_fd(call));
+        varlink_service_free(service);
+
+        /* make sure calling process releases its tty ownership -
+           otherwise login_tty() will fail with EPERM */
+        if (wait_for_pid_gone(calling_pid) < 0) {
+            fprintf(stderr, "wait_for_pid_gone: %m\n");
+            exit_shell(1);
+        }
+
+        if (dup2(tty_fd, 255) < 0) {
+            fprintf(stderr, "dup2: 255: %m\n");
+            exit_shell(1);
+        }
+
+        if (login_tty(tty_fd) < 0) {
+            fprintf(stderr, "login_tty: %m\n");
+            exit_shell(1);
+        }
+
+        dollar_dollar_pid = getpid();
+
+        if (chdir(current_dir) < 0)
+            fprintf(stderr, "failed to change dir: %m\n");
+        set_working_directory((char *)current_dir);
+        set_pwd();
+
+        indirection_level = 0;
+        parse_and_execute_level = 0;
+        adjust_shell_level(-1);
+
+        /* Initialize the trap signal handlers before installing our own
+           signal handlers.  traps.c:restore_original_signals () is responsible
+           for restoring the original default signal handlers.  That function
+           is called when we make a new child. */
+        initialize_traps ();
+        initialize_signals (0);
+
+        /* Initialize the data structures for storing and running jobs. */
+        initialize_job_control (jobs_m_flag);
+
+        bash_initialize_history ();
+        load_history ();
+
+        reader_loop ();
+        exit_shell (last_command_exit_value);
+    }
+
+    close(tty_fd);
+
+    assert(varlink_object_new(&out) == 0);
+    assert(varlink_object_set_int(out, "pid", child_pid) == 0);
+    int res = varlink_call_reply(call, out, 0);
+    if (res < 0) {
+        fprintf(stderr, "varlink_call_reply: %s\n", varlink_error_string(res));
+        varlink_object_unref(out);
+        return -1;
+    }
+
+    varlink_object_unref(out);
+    return 0;
+}
+
+static int process_varlink_events(varlink_ctx *ctx) {
+    struct epoll_event events[2];
+    long n;
+
+    n = epoll_wait(ctx->epoll_fd, events, 2, -1);
+    if (n == 0)
+        return 0;
+    if (n < 0) {
+        if (errno == EINTR)
+            return 0;
+        fprintf(stderr, "epoll_wait: %m\n");
+        return -1;
+    }
+
+    for (long i = 0; i < n; i += 1) {
+        if (events[i].data.ptr == ctx->service) {
+            int res = varlink_service_process_events(ctx->service);
+            if (res < 0)
+                fprintf(stderr, "varlink_service_process_events: %s (%m)\n", varlink_error_string(res));
+        } else
+            assert(false);
+    }
+
+    return 0;
+}
+
+static void varlink_loop(void)
+{
+    varlink_ctx ctx = {};
+
+    setlinebuf(stdout);
+    setlinebuf(stderr);
+
+    uid_t uid = getuid();
+    char socket_addr[4096];
+    snprintf(socket_addr, sizeof(socket_addr), "unix:@bash-zygote-%u.socket", uid);
+
+    const char *interface = "interface org.bash.zygote\n"
+                            "method Spawn(pid: int, tty_name: string, current_dir: string) -> (pid: int)";
+
+    int res = varlink_service_new(&ctx.service,
+                                  "mbachry", "bash-zygote", "0.1", "https://github.com/mbachry/bash-zygote",
+                                  socket_addr,
+                                  -1);
+    if (res < 0) {
+        fprintf(stderr, "varlink_service_new: %s (%m)\n", varlink_error_string(res));
+        exit_shell(1);
+    }
+    assert(varlink_service_add_interface(ctx.service, interface,
+                                         "Spawn", org_bash_zygote_Spawn, &ctx,
+                                         NULL) == 0);
+
+    ctx.epoll_fd = epoll_create1(EPOLL_CLOEXEC);
+    assert(ctx.epoll_fd > 0);
+
+    struct epoll_event event = {
+        .events = EPOLLIN,
+        .data = {
+            .ptr = ctx.service
+        }
+    };
+    assert(epoll_ctl(ctx.epoll_fd,
+                     EPOLL_CTL_ADD,
+                     varlink_service_get_fd(ctx.service),
+                     &event) == 0);
+
+    while (1) {
+        if (process_varlink_events(&ctx) < 0)
+            exit_shell(1);
+    }
+}
+
 #ifdef __CYGWIN__
 static void
 _cygwin32_check_tmp ()
@@ -829,8 +1031,8 @@ main (argc, argv, env)
   if (pretty_print_mode)
     exit_shell (pretty_print_loop ());
 
-  /* Read commands until exit condition. */
-  reader_loop ();
+  varlink_loop();
+
   exit_shell (last_command_exit_value);
 }
 
@@ -1941,13 +2143,6 @@ shell_initialize ()
      find_shell_builtin () works correctly. */
   initialize_shell_builtins ();
 
-  /* Initialize the trap signal handlers before installing our own
-     signal handlers.  traps.c:restore_original_signals () is responsible
-     for restoring the original default signal handlers.  That function
-     is called when we make a new child. */
-  initialize_traps ();
-  initialize_signals (0);
-
   /* It's highly unlikely that this will change. */
   if (current_host_name == 0)
     {
@@ -1980,9 +2175,6 @@ shell_initialize ()
   initialize_shell_variables (shell_environment, privileged_mode||running_setuid);
 #endif
 
-  /* Initialize the data structures for storing and running jobs. */
-  initialize_job_control (jobs_m_flag);
-
   /* Initialize input streams to null. */
   initialize_bash_input ();
 
